import{p as d,u as h,g as F}from"./composables.rImk_723.js";import{u as _}from"./vue.f36acd1f._VUlF31q.js";import{I as a,d as j,r as q,o as I,ag as f,j as N}from"./entry.cG5A5DPv.js";const b={src:{type:String,required:!0},format:{type:String,default:void 0},quality:{type:[Number,String],default:void 0},background:{type:String,default:void 0},fit:{type:String,default:void 0},modifiers:{type:Object,default:void 0},preset:{type:String,default:void 0},provider:{type:String,default:void 0},sizes:{type:[Object,String],default:void 0},densities:{type:String,default:void 0},preload:{type:Boolean,default:void 0},width:{type:[String,Number],default:void 0},height:{type:[String,Number],default:void 0},alt:{type:String,default:void 0},referrerpolicy:{type:String,default:void 0},usemap:{type:String,default:void 0},longdesc:{type:String,default:void 0},ismap:{type:Boolean,default:void 0},loading:{type:String,default:void 0,validator:e=>["lazy","eager"].includes(e)},crossorigin:{type:[Boolean,String],default:void 0,validator:e=>["anonymous","use-credentials","",!0,!1].includes(e)},decoding:{type:String,default:void 0,validator:e=>["async","auto","sync"].includes(e)},nonce:{type:[String],default:void 0}},B=e=>{const n=a(()=>({provider:e.provider,preset:e.preset})),s=a(()=>({width:d(e.width),height:d(e.height),alt:e.alt,referrerpolicy:e.referrerpolicy,usemap:e.usemap,longdesc:e.longdesc,ismap:e.ismap,crossorigin:e.crossorigin===!0?"anonymous":e.crossorigin||void 0,loading:e.loading,decoding:e.decoding,nonce:e.nonce})),r=h(),l=a(()=>({...e.modifiers,width:d(e.width),height:d(e.height),format:e.format,quality:e.quality||r.options.quality,background:e.background,fit:e.fit}));return{options:n,attrs:s,modifiers:l}},O={...b,legacyFormat:{type:String,default:null},imgAttrs:{type:Object,default:null}},C=j({name:"NuxtPicture",props:O,emits:["load"],setup:(e,n)=>{var v,m;const s=h(),r=B(e),l=a(()=>F(e.src)),z=a(()=>["png","webp","gif","svg"].includes(l.value)),u=a(()=>e.legacyFormat?e.legacyFormat:z.value?"png":"jpeg"),i=a(()=>{var y,p;const t=((y=e.format)==null?void 0:y.split(","))||(l.value==="svg"?["svg"]:(p=s.options.format)!=null&&p.length?[...s.options.format]:["webp"]);return t[0]==="svg"?[{src:e.src}]:(t.includes(u.value)&&t.splice(t.indexOf(u.value),1),t.push(u.value),t.map(S=>{const{srcset:x,sizes:A,src:k}=s.getSizes(e.src,{...r.options.value,sizes:e.sizes||s.options.screens,densities:e.densities,modifiers:{...r.modifiers.value,format:S}});return{src:k,type:`image/${S}`,sizes:A,srcset:x}}))}),c=a(()=>i.value.length-1);if(e.preload){const t={rel:"preload",as:"image",imagesrcset:i.value[0].srcset,nonce:e.nonce};(m=(v=i.value)==null?void 0:v[0])!=null&&m.sizes&&(t.imagesizes=i.value[0].sizes),_({link:[t]})}const g={...e.imgAttrs,"data-nuxt-pic":""};for(const t in n.attrs)t in b&&!(t in g)&&(g[t]=n.attrs[t]);const o=q(),w=N().isHydrating;return I(()=>{o.value&&(o.value.complete&&w&&!o.value.getAttribute("data-error")&&n.emit("load",new Event("load")),o.value.onload=t=>{n.emit("load",t)})}),()=>f("picture",null,[...i.value.slice(0,-1).map(t=>f("source",{type:t.type,sizes:t.sizes,srcset:t.srcset})),f("img",{ref:o,...r.attrs.value,...g,src:i.value[c.value].src,sizes:i.value[c.value].sizes,srcset:i.value[c.value].srcset})])}});export{C as _};
